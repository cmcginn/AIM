
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;

namespace AIM.Data
{
    /// <summary>
    /// The data manager for a DataContext.
    /// </summary>
    public class Manager : CodeSmith.Data.DataManagerBase<AIM.Data.DomainContext>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AIM.Data.Manager"/> class.
        /// </summary>
        /// <param name="context">An instance of <see cref="AIM.Data.DomainContext"/> DataContext.</param>
        public Manager(AIM.Data.DomainContext context) : base(context)
        { }
        
        #region Managers
        private AspnetApplicationsManager _aspnetApplicationsManager;

        /// <summary>
        /// Gets the manager for AspnetApplications.
        /// </summary>
        public AspnetApplicationsManager AspnetApplications
        {
            get
            {
                if (_aspnetApplicationsManager == null)
                    _aspnetApplicationsManager = new AspnetApplicationsManager(this);

                return _aspnetApplicationsManager;
            }
        }
        private AspnetMembershipManager _aspnetMembershipManager;

        /// <summary>
        /// Gets the manager for AspnetMembership.
        /// </summary>
        public AspnetMembershipManager AspnetMembership
        {
            get
            {
                if (_aspnetMembershipManager == null)
                    _aspnetMembershipManager = new AspnetMembershipManager(this);

                return _aspnetMembershipManager;
            }
        }
        private AspnetPathsManager _aspnetPathsManager;

        /// <summary>
        /// Gets the manager for AspnetPaths.
        /// </summary>
        public AspnetPathsManager AspnetPaths
        {
            get
            {
                if (_aspnetPathsManager == null)
                    _aspnetPathsManager = new AspnetPathsManager(this);

                return _aspnetPathsManager;
            }
        }
        private AspnetPersonalizationAllUsersManager _aspnetPersonalizationAllUsersManager;

        /// <summary>
        /// Gets the manager for AspnetPersonalizationAllUsers.
        /// </summary>
        public AspnetPersonalizationAllUsersManager AspnetPersonalizationAllUsers
        {
            get
            {
                if (_aspnetPersonalizationAllUsersManager == null)
                    _aspnetPersonalizationAllUsersManager = new AspnetPersonalizationAllUsersManager(this);

                return _aspnetPersonalizationAllUsersManager;
            }
        }
        private AspnetPersonalizationPerUserManager _aspnetPersonalizationPerUserManager;

        /// <summary>
        /// Gets the manager for AspnetPersonalizationPerUser.
        /// </summary>
        public AspnetPersonalizationPerUserManager AspnetPersonalizationPerUser
        {
            get
            {
                if (_aspnetPersonalizationPerUserManager == null)
                    _aspnetPersonalizationPerUserManager = new AspnetPersonalizationPerUserManager(this);

                return _aspnetPersonalizationPerUserManager;
            }
        }
        private AspnetProfileManager _aspnetProfileManager;

        /// <summary>
        /// Gets the manager for AspnetProfile.
        /// </summary>
        public AspnetProfileManager AspnetProfile
        {
            get
            {
                if (_aspnetProfileManager == null)
                    _aspnetProfileManager = new AspnetProfileManager(this);

                return _aspnetProfileManager;
            }
        }
        private AspnetRolesManager _aspnetRolesManager;

        /// <summary>
        /// Gets the manager for AspnetRoles.
        /// </summary>
        public AspnetRolesManager AspnetRoles
        {
            get
            {
                if (_aspnetRolesManager == null)
                    _aspnetRolesManager = new AspnetRolesManager(this);

                return _aspnetRolesManager;
            }
        }
        private AspnetSchemaVersionsManager _aspnetSchemaVersionsManager;

        /// <summary>
        /// Gets the manager for AspnetSchemaVersions.
        /// </summary>
        public AspnetSchemaVersionsManager AspnetSchemaVersions
        {
            get
            {
                if (_aspnetSchemaVersionsManager == null)
                    _aspnetSchemaVersionsManager = new AspnetSchemaVersionsManager(this);

                return _aspnetSchemaVersionsManager;
            }
        }
        private AspnetUsersManager _aspnetUsersManager;

        /// <summary>
        /// Gets the manager for AspnetUsers.
        /// </summary>
        public AspnetUsersManager AspnetUsers
        {
            get
            {
                if (_aspnetUsersManager == null)
                    _aspnetUsersManager = new AspnetUsersManager(this);

                return _aspnetUsersManager;
            }
        }
        private AspnetUsersInRolesManager _aspnetUsersInRolesManager;

        /// <summary>
        /// Gets the manager for AspnetUsersInRoles.
        /// </summary>
        public AspnetUsersInRolesManager AspnetUsersInRoles
        {
            get
            {
                if (_aspnetUsersInRolesManager == null)
                    _aspnetUsersInRolesManager = new AspnetUsersInRolesManager(this);

                return _aspnetUsersInRolesManager;
            }
        }
        private AspnetWebEventEventsManager _aspnetWebEventEventsManager;

        /// <summary>
        /// Gets the manager for AspnetWebEventEvents.
        /// </summary>
        public AspnetWebEventEventsManager AspnetWebEventEvents
        {
            get
            {
                if (_aspnetWebEventEventsManager == null)
                    _aspnetWebEventEventsManager = new AspnetWebEventEventsManager(this);

                return _aspnetWebEventEventsManager;
            }
        }
        private ClientManager _clientManager;

        /// <summary>
        /// Gets the manager for Client.
        /// </summary>
        public ClientManager Client
        {
            get
            {
                if (_clientManager == null)
                    _clientManager = new ClientManager(this);

                return _clientManager;
            }
        }
        private ClientFileImportManager _clientFileImportManager;

        /// <summary>
        /// Gets the manager for ClientFileImport.
        /// </summary>
        public ClientFileImportManager ClientFileImport
        {
            get
            {
                if (_clientFileImportManager == null)
                    _clientFileImportManager = new ClientFileImportManager(this);

                return _clientFileImportManager;
            }
        }
        private ClientPropertiesManager _clientPropertiesManager;

        /// <summary>
        /// Gets the manager for ClientProperties.
        /// </summary>
        public ClientPropertiesManager ClientProperties
        {
            get
            {
                if (_clientPropertiesManager == null)
                    _clientPropertiesManager = new ClientPropertiesManager(this);

                return _clientPropertiesManager;
            }
        }
        private ContactManager _contactManager;

        /// <summary>
        /// Gets the manager for Contact.
        /// </summary>
        public ContactManager Contact
        {
            get
            {
                if (_contactManager == null)
                    _contactManager = new ContactManager(this);

                return _contactManager;
            }
        }
        private ImportTypeManager _importTypeManager;

        /// <summary>
        /// Gets the manager for ImportType.
        /// </summary>
        public ImportTypeManager ImportType
        {
            get
            {
                if (_importTypeManager == null)
                    _importTypeManager = new ImportTypeManager(this);

                return _importTypeManager;
            }
        }
        #endregion
    }
}