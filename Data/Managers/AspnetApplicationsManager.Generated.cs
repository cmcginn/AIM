
#pragma warning disable 1591
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data.Linq;
using System.Linq;
using System.Text;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace AIM.Data
{
    /// <summary>
    /// The manager class for AspnetApplications.
    /// </summary>
    public partial class AspnetApplicationsManager 
        : CodeSmith.Data.EntityManagerBase<Manager, AIM.Data.AspnetApplications>
    {
        /// <summary>
        /// Initializes the <see cref="AspnetApplicationsManager"/> class.
        /// </summary>
        /// <param name="manager">The current manager.</param>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public AspnetApplicationsManager(Manager manager)
            : base(manager)
        {
            OnCreated();
        }

        /// <summary>
        /// Gets the current context.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        protected AIM.Data.DomainContext Context
        {
            get { return Manager.Context; }
        }
        
        /// <summary>
        /// Gets the entity for this manager.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        protected System.Data.Linq.Table<AIM.Data.AspnetApplications> Entity
        {
            get { return Manager.Context.AspnetApplications; }
        }
        
        
        /// <summary>
        /// Creates the key for this entity.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public static CodeSmith.Data.IEntityKey<System.Guid> CreateKey(System.Guid applicationId)
        {
            return new CodeSmith.Data.EntityKey<System.Guid>(applicationId);
        }
        
        /// <summary>
        /// Gets an entity by the primary key.
        /// </summary>
        /// <param name="key">The key for the entity.</param>
        /// <returns>
        /// An instance of the entity or null if not found.
        /// </returns>
        /// <remarks>
        /// This method is expecting key to be of type IEntityKey&lt;System.Guid&gt;.
        /// </remarks>
        /// <exception cref="ArgumentException">Thrown when key is not of type IEntityKey&lt;System.Guid&gt;.</exception>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public override AIM.Data.AspnetApplications GetByKey(CodeSmith.Data.IEntityKey key)
        {
            if (key is CodeSmith.Data.IEntityKey<System.Guid>)
            {
                var entityKey = (CodeSmith.Data.IEntityKey<System.Guid>)key;
                return GetByKey(entityKey.Key);
            }
            else
            {
                throw new ArgumentException("Invalid key, expected key to be of type IEntityKey<System.Guid>");
            }
        }
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public AIM.Data.AspnetApplications GetByKey(System.Guid applicationId)
        {
            if (Context.LoadOptions == null) 
                return Query.GetByKey.Invoke(Context, applicationId);
            else
                return Entity.FirstOrDefault(a => a.ApplicationId == applicationId);
        }
        
        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <returns>The number of rows deleted from the database.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public int Delete(System.Guid applicationId)
        {
            return Entity.Delete(a => a.ApplicationId == applicationId);
        }
        /// <summary>
        /// Gets a query by an index.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public IQueryable<AIM.Data.AspnetApplications> GetByLoweredApplicationName(string loweredApplicationName)
        {
            if (Context.LoadOptions == null) 
                return Query.GetByLoweredApplicationName.Invoke(Context, loweredApplicationName);
            else
                return Entity.Where(a => a.LoweredApplicationName == loweredApplicationName);
        }
        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        public AIM.Data.AspnetApplications GetByApplicationName(string applicationName)
        {
            if (Context.LoadOptions == null) 
                return Query.GetByApplicationName.Invoke(Context, applicationName);
            else
                return Entity.FirstOrDefault(a => a.ApplicationName == applicationName);
        }

        #region Extensibility Method Definitions
        /// <summary>Called when the class is created.</summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
        partial void OnCreated();
        #endregion
        
        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
            internal static readonly Func<AIM.Data.DomainContext, System.Guid, AIM.Data.AspnetApplications> GetByKey = 
                System.Data.Linq.CompiledQuery.Compile(
                    (AIM.Data.DomainContext db, System.Guid applicationId) => 
                        db.AspnetApplications.FirstOrDefault(a => a.ApplicationId == applicationId));

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
            internal static readonly Func<AIM.Data.DomainContext, string, IQueryable<AIM.Data.AspnetApplications>> GetByLoweredApplicationName = 
                System.Data.Linq.CompiledQuery.Compile(
                    (AIM.Data.DomainContext db, string loweredApplicationName) => 
                        db.AspnetApplications.Where(a => a.LoweredApplicationName == loweredApplicationName));

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "5.0.0.0")]
            internal static readonly Func<AIM.Data.DomainContext, string, AIM.Data.AspnetApplications> GetByApplicationName = 
                System.Data.Linq.CompiledQuery.Compile(
                    (AIM.Data.DomainContext db, string applicationName) => 
                        db.AspnetApplications.FirstOrDefault(a => a.ApplicationName == applicationName));

        }
        #endregion
    }
}
#pragma warning restore 1591

